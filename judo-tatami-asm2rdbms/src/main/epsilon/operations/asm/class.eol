@cached
operation ASM!EClass classSqlName() : String {
    if (createSimpleName) {
        return self.sqlLongName();
    } else {
        return self.ePackage.packageSqlName() + "_" + self.sqlLongName();
    }
}

@cached
operation ASM!EClass tableSqlName() : String {
    return tablePrefix + abbreviate(self.classSqlName(), tableNameMaxSize() - tablePrefix.length()).toUpperCase();
}

@cached
operation ASM!EClass viewSqlName() : String {
    return "V_" + abbreviate(self.classSqlName(), tableNameMaxSize() - 2).toUpperCase();
}

@cached
operation ASM!EClass primaryKeyAttribute() : ASM!EAttribute {
    return self.eAllAttributes.selectOne(a | asmUtils.annotatedAsTrue(a, "id"));
}

@cached
operation ASM!EClass allSupertypesAttributes() : Collection {
    return self.eAllAttributes.excludingAll(self.eAttributes);
}

@cached
operation ASM!EClass allDescandences() : Collection {
    var ret : Sequence = new Sequence();
    for (c : ASM!EClass in ASM!EClass.all.select( c | c.eSuperTypes.includes(self))) {
        ret.add(c);
        ret.addAll(c.allDescandences());
    }
    return ret;
}

@cached
operation ASM!EClass root() : ASM!EPackage {
    return self.ePackage.root();
}

