import "../utils/_importUtils.eol";
import "namespace.etl";

@abstract
rule AddPrimitiveAccessorConstraints
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation {
        guard: not s.isKindOf(JUDOPSM!StaticData)
        t.setId("(psm/" + s.getId() + ")/PrimitiveAccessorConstraints");
        t.source = asmUtils.getAnnotationUri("constraints");

        s.asmEquivalent().eAnnotations.add(t);
    }

@greedy
rule AddStringPrimitiveAccessorConstraints
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddPrimitiveAccessorConstraints {
        guard: not s.isKindOf(JUDOPSM!StaticData) and s.dataType.isKindOf(JUDOPSM!StringType)
        t.setId("(psm/" + s.getId() + ")/StringPrimitiveAccessorConstraints");

        var maxLength = new ASM!EStringToStringMapEntry;
        maxLength.setId(t.getId() + "/MaxLength");
        maxLength.key = "maxLength";
        maxLength.value = s.dataType.maxLength.asString();
        t.details.add(maxLength);

        if (s.dataType.regExp.isDefined() and s.dataType.regExp.trim().length() > 0) {
            var pattern = new ASM!EStringToStringMapEntry;
            pattern.setId(t.getId() + "/Pattern");
            pattern.key = "pattern";
            pattern.value = s.dataType.regExp;
            t.details.add(pattern);
        }
    }

@greedy
rule AddCustomPrimitiveAccessorConstraints
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddPrimitiveAccessorConstraints {
        guard: not s.isKindOf(JUDOPSM!StaticData) and s.dataType.isKindOf(JUDOPSM!CustomType)
        t.setId("(psm/" + s.getId() + ")/CustomPrimitiveAccessorConstraints");

        var customType = new ASM!EStringToStringMapEntry;
        customType.setId(t.getId() + "/CustomType");
        customType.key = "customType";
        customType.value = psmUtils.namespaceElementToString(s.dataType).replace("::", ".");
        t.details.add(customType);
    }

@abstract
rule AddAbstractNumericPrimitiveAccessorConstraints
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddPrimitiveAccessorConstraints {
        t.setId("(psm/" + s.getId() + ")/AbstractNumericPrimitiveAccessorConstraints");

        var precision = new ASM!EStringToStringMapEntry;
        precision.setId(t.getId() + "/Precision");
        precision.key = "precision";
        precision.value = s.dataType.precision.asString();
        t.details.add(precision);

        var scale = new ASM!EStringToStringMapEntry;
        scale.setId(t.getId() + "/Scale");
        scale.key = "scale";
        scale.value = s.dataType.scale.asString();
        t.details.add(scale);
    }

@greedy
rule AddNumericPrimitiveAccessorConstraints
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddAbstractNumericPrimitiveAccessorConstraints {
        guard: not s.isKindOf(JUDOPSM!StaticData) and s.dataType.isKindOf(JUDOPSM!NumericType) and not s.dataType.isKindOf(JUDOPSM!MeasuredType)
        t.setId("(psm/" + s.getId() + ")/NumericPrimitiveAccessorConstraints");
    }

@greedy
rule AddMeasuredPrimitiveAccessorConstraints
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddAbstractNumericPrimitiveAccessorConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!MeasuredType)
        t.setId("(psm/" + s.getId() + ")/MeasuredPrimitiveAccessorConstraints");

        var measure = new ASM!EStringToStringMapEntry;
        measure.setId(t.getId() + "/Measure");
        measure.key = "measure";
        measure.value = psmUtils.namespaceElementToString(s.dataType.storeUnit.eContainer).replace("::", ".");
        t.details.add(measure);

        var unit = new ASM!EStringToStringMapEntry;
        unit.setId(t.getId() + "/Unit");
        unit.key = "unit";
        unit.value = s.dataType.storeUnit.name;
        t.details.add(unit);
    }

@greedy
rule CreatePrimitiveAccessorExpressionAnnotation
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation {
        guard: not s.isKindOf(JUDOPSM!StaticData)
        t.setId("(psm/" + s.getId() + ")/PrimitiveAccessorExpressionAnnotation");
        t.source = asmUtils.getAnnotationUri("expression");

        var getter = new ASM!EStringToStringMapEntry;
        getter.setId(t.getId() + "/Getter");
        getter.key = "getter";
        getter.value = s.getterExpression.expression;
        t.details.add(getter);

        var getterDialect = new ASM!EStringToStringMapEntry;
        getterDialect.setId(t.getId() + "/GetterDialect");
        getterDialect.key = "getter.dialect";
        getterDialect.value = s.getterExpression.dialect.asString();
        t.details.add(getterDialect);

        if (s.getterExpression.parameterType.isDefined()) {
            var getterParameterType = new ASM!EStringToStringMapEntry;
            getterParameterType.setId(t.getId() + "/GetterParameterType");
            getterParameterType.key = "getter.parameter";
            getterParameterType.value = asmUtils.getClassifierFQName(s.getterExpression.parameterType.asmEquivalent());
            t.details.add(getterParameterType);
        }

        if (s.setterExpression.isDefined()) {
            var setter = new ASM!EStringToStringMapEntry;
            setter.setId(t.getId() + "/Setter");
            setter.key = "setter";
            setter.value = s.setterExpression.expression;
            t.details.add(setter);

            var setterDialect = new ASM!EStringToStringMapEntry;
            setterDialect.setId(t.getId() + "/SetterDialect");
            setterDialect.key = "setter.dialect";
            setterDialect.value = s.setterExpression.dialect.asString();
            t.details.add(setterDialect);

            if (s.setterExpression.parameterType.isDefined()) {
                var setterParameterType = new ASM!EStringToStringMapEntry;
                setterParameterType.setId(t.getId() + "/SetterParameterType");
                setterParameterType.key = "setter.parameter";
                setterParameterType.value = asmUtils.getClassifierFQName(s.setterExpression.parameterType.asmEquivalent());
                t.details.add(setterParameterType);
            }
        }
           s.asmEquivalent().eAnnotations.add(t);
    }

@greedy
rule CreateReferenceAccessorExpressionAnnotation
    transform s : JUDOPSM!ReferenceAccessor
    to t : ASM!EAnnotation {
        guard: not s.isKindOf(JUDOPSM!StaticNavigation)
        t.setId("(psm/" + s.getId() + ")/ReferenceAccessorExpressionAnnotation");
        t.source = asmUtils.getAnnotationUri("expression");

        var getter = new ASM!EStringToStringMapEntry;
        getter.setId(t.getId() + "/Getter");
        getter.key = "getter";
        getter.value = s.getterExpression.expression;
        t.details.add(getter);

        var getterDialect = new ASM!EStringToStringMapEntry;
        getterDialect.setId(t.getId() + "/GetterDialect");
        getterDialect.key = "getter.dialect";
        getterDialect.value = s.getterExpression.dialect.asString();
        t.details.add(getterDialect);

        if (s.getterExpression.parameterType.isDefined()) {
            var getterParameterType = new ASM!EStringToStringMapEntry;
            getterParameterType.setId(t.getId() + "/GetterParameterType");
            getterParameterType.key = "getter.parameter";
            getterParameterType.value = asmUtils.getClassifierFQName(s.getterExpression.parameterType.asmEquivalent());
            t.details.add(getterParameterType);
        }

        if (s.setterExpression.isDefined()) {
            var setter = new ASM!EStringToStringMapEntry;
            setter.setId(t.getId() + "/Setter");
            setter.key = "setter";
            setter.value = s.setterExpression.expression;
            t.details.add(setter);

            var setterDialect = new ASM!EStringToStringMapEntry;
            setterDialect.setId(t.getId() + "/SetterDialect");
            setterDialect.key = "setter.dialect";
            setterDialect.value = s.setterExpression.dialect.asString();
            t.details.add(setterDialect);

            if (s.setterExpression.parameterType.isDefined()) {
                var setterParameterType = new ASM!EStringToStringMapEntry;
                setterParameterType.setId(t.getId() + "/SetterParameterType");
                setterParameterType.key = "setter.parameter";
                setterParameterType.value = asmUtils.getClassifierFQName(s.setterExpression.parameterType.asmEquivalent());
                t.details.add(setterParameterType);
            }
        }

        s.asmEquivalent().eAnnotations.add(t);
    }

@abstract
rule CreatePrimitiveAccessor
    transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAttribute {
        t.setId("(psm/" + s.getId() + ")/PrimitiveAccessor");
        t.name = s.name;
        t.derived = true;
        t.volatile = true;

        if (s.required) {
            t.lowerBound = 1;
        } else {
            t.lowerBound = 0;
        }

        t.eType = s.dataType.asmEquivalent();
        if (not s.setterExpression.isDefined()) {
            t.changeable = false;
        }
    }

@abstract
rule CreateReferenceAccessor
    transform s : JUDOPSM!ReferenceAccessor
    to t : ASM!EReference {
        t.setId("(psm/" + s.getId() + ")/ReferenceAccessor");
        t.name = s.name;
        t.derived = true;
        t.volatile = true;

        t.lowerBound = s.cardinality.lower;
        t.upperBound = s.cardinality.upper;

        t.eType = s.target.equivalent("CreateEntityClass");
        if (not s.setterExpression.isDefined()) {
            t.changeable = false;
        }
}

rule CreateDataProperty
    transform s : JUDOPSM!DataProperty
    to t : ASM!EAttribute
    extends CreatePrimitiveAccessor {
        guard: s.isPrimitive()
        t.setId("(psm/" + s.getId() + ")/DataProperty");
        s.getEntityType().equivalent("CreateEntityClass").eStructuralFeatures.add(t);
    }

rule CreateNavigationProperty
    transform s : JUDOPSM!NavigationProperty
    to t : ASM!EReference
    extends CreateReferenceAccessor {
        t.setId("(psm/" + s.getId() + ")/NavigationProperty");
        s.getEntityType().equivalent("CreateEntityClass").eStructuralFeatures.add(t);
}

rule CreateDocumentationAnnotationForDataProperty
    transform s : JUDOPSM!DataProperty
    to t : ASM!EAnnotation
        extends CreateDocumentationAnnotation {
        t.setId("(psm/" + s.getId() + ")/DocumentationAnnotationForDataProperty");
        s.equivalent("CreateDataProperty").eAnnotations.add(t);
    }

rule CreateDocumentationAnnotationForNavigationProperty
    transform s : JUDOPSM!NavigationProperty
    to t : ASM!EAnnotation
        extends CreateDocumentationAnnotation {
        t.setId("(psm/" + s.getId() + ")/DocumentationAnnotationForNavigationProperty");
        s.equivalent("CreateNavigationProperty").eAnnotations.add(t);
    }
