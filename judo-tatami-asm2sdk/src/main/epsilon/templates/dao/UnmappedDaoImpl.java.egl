[%
  import "../../operations/sdk.eol";
  out.setContentType("Java");
%]

[%
    var dtoTypeName = getSdkPrefix() + dto.getDtoTypeName();
    var name = dto.getClassName() + "Dao";
    var sdkUtil = "hu.blackbelt.judo.sdk.SdkUtil";
%]

package [%= getInternalPrefix() + dto.getClassifierPackageName() %];

/**
* {@inheritdoc}
*/
public class [%= name%]Impl extends hu.blackbelt.judo.sdk.AbstractSdkDao implements [%= dtoTypeName %].[%= name %] {
    private final static String FQ_NAME = "[%= asmUtils.getClassifierFqName(dto) %]";

    [% for (attr in dto.eAttributes.select(a | a.derived and not asmUtils.annotatedAsTrue(a, "parameterized"))) {%]
    /**
    * {@inheritdoc}
    */
    @Override
    public [%= attr.getTypeDefinition() %] get[%= attr.name.firstToUpperCase() %]() {
        return ([%= attr.getTypeDefinition() %]) dao.getStaticData(asmUtils.resolveAttribute("[%= asmUtils.getClassifierFQName(dto) %]#[%= attr.name %]").get()).get("[%= attr.name %]");
    }
    [% } %]

    [% for (attr in dto.eAllAttributes.select(a | a.derived and asmUtils.annotatedAsTrue(a, "parameterized"))) {
        var parameterType = asmUtils.resolve(asmUtils.getExtensionAnnotationCustomValue(attr, "parameterized", "type", false).get()).get(); %]
    /**
    * {@inheritdoc}
    */
    @Override
    public [%= attr.getTypeDefinition() %] get[%= attr.name.firstToUpperCase() %]([%= getSdkPrefix() + parameterType.getClassifierPackageName() %].[%= parameterType.getClassName() %] parameter) {
        return java.util.Optional.ofNullable(dao.getParameterizedStaticData(asmUtils.resolveAttribute("[%= asmUtils.getClassifierFQName(dto) %]#[%= attr.name %]").get(), hu.blackbelt.judo.sdk.SdkUtil.asMap(parameter)))
            .map(r -> ([%= attr.getTypeDefinition() %])r.get("[%= attr.name %]")).orElse(null);
    }
    [% } %]

    [% for (ref in dto.eReferences.select(r | r.derived)) { %]
    /**
    * {@inheritdoc}
    */
    @Override
    public [%= ref.getTypeDefinition() %] get[%= ref.name.firstToUpperCase() %]() {
        org.eclipse.emf.ecore.EReference reference = asmUtils.resolveReference("[%= asmUtils.getClassifierFqName(dto) %]#[%= ref.name %]").get();
        return dao.getAllReferencedInstancesOf(reference, reference.getEReferenceType()).stream()
            .map(payload -> hu.blackbelt.judo.sdk.SdkUtil.fromPayload([%= getSdkPrefix() + ref.eReferenceType.getDtoTypeName() %].class, payload))
        [% if (ref.many) { %]
            .collect(java.util.stream.Collectors.toList());
        [% } else { %]
            .findAny().orElse(null);
        [% } %]
    }
    [% } %]

    [% for (ref in dto.eReferences.select(r | r.derived and r.many)) { %]

        [% if (asmUtils.annotatedAsTrue(ref, "parameterized")) {
               var parameterType = asmUtils.resolve(asmUtils.getExtensionAnnotationCustomValue(ref, "parameterized", "type", false).get()).get(); %]
    class QueryCustomizerImplFor[%= ref.name.firstToUpperCase() %] extends [%= getInternalPrefix() + ref.eReferenceType.getClassifierPackageName() %].[%= ref.eReferenceType.getClassName() %]DaoImpl.QueryCustomizerImpl implements [%= getSdkPrefix() + dto.getClassifierPackageName() %].[%= dto.getClassName() %].[%= name %].QueryCustomizerFor[%= ref.name.firstToUpperCase() %] {
        public QueryCustomizerImplFor[%= ref.name.firstToUpperCase() %](hu.blackbelt.judo.meta.asm.runtime.AsmUtils asmUtils, hu.blackbelt.judo.dao.api.DAO<java.util.UUID> dao) {
            super(asmUtils, dao);
        }

[%
    var t = TemplateFactory.load("dao/QueryCustomizerBuilderImpl.java.egl");
    var queryCustomizer = "QueryCustomizerImplFor" + ref.name.firstToUpperCase();
    var queryCustomizerDto = ref.eReferenceType;
    out.print(t.process);
%]

        @Override
        public java.util.List<[%= getSdkPrefix() + ref.eReferenceType.getDtoTypeName() %]> execute() {
            throw new java.lang.UnsupportedOperationException("Executing search operation needs query parameter");
        }

        @Override
        public java.util.List<[%= getSdkPrefix() + ref.eReferenceType.getDtoTypeName() %]> execute([%= getSdkPrefix() + parameterType.getClassifierPackageName() %].[%= parameterType.getClassName() %] parameter) {
            org.eclipse.emf.ecore.EReference reference = asmUtils.resolveReference("[%= asmUtils.getClassifierFqName(dto) %]#[%= ref.name %]").get();
            return dao.searchReferencedInstancesOf(reference, reference.getEReferenceType(), hu.blackbelt.judo.dao.api.DAO.QueryCustomizer.<java.util.UUID>builder()
                .filter(!filters.isEmpty() ? filters.stream().collect(java.util.stream.Collectors.joining(" and ")) : null)
                .orderByList(orderByList)
                .mask(mask)
                .seek(limit != null ? hu.blackbelt.judo.dao.api.DAO.Seek.builder().limit(limit).build() : null)
                .parameters(hu.blackbelt.judo.sdk.SdkUtil.asMap(parameter))
                .build())
                .stream()
                .map(payload -> [%= sdkUtil %].fromPayload([%= getSdkPrefix() + ref.eReferenceType.getDtoTypeName() %].class, payload))
                .collect(java.util.stream.Collectors.toList());
        }
    }
        [% } %]

    /**
    * {@inheritdoc}
    */
    @Override
        [% if (asmUtils.annotatedAsTrue(ref, "parameterized")) { %]
    public [%= getSdkPrefix() + dto.getClassifierPackageName() %].[%= dto.getClassName() %].[%= name %].QueryCustomizerFor[%= ref.name.firstToUpperCase() %] search[%= ref.name.firstToUpperCase() %]() {
        return new [%= getInternalPrefix() + dto.getClassifierPackageName() %].[%= name%]Impl.QueryCustomizerImplFor[%= ref.name.firstToUpperCase() %](asmUtils, dao);
        [% } else { %]
    public [%= getSdkPrefix() + ref.eReferenceType.getClassifierPackageName() %].[%= ref.eReferenceType.getClassName() %].[%= ref.eReferenceType.getClassName() %]Dao.QueryCustomizer search[%= ref.name.firstToUpperCase() %]() {
        org.eclipse.emf.ecore.EReference reference = asmUtils.resolveReference("[%= asmUtils.getClassifierFqName(dto) %]#[%= ref.name %]").get();
        return new [%= getInternalPrefix() + ref.eReferenceType.getClassifierPackageName() %].[%= ref.eReferenceType.getClassName() %]DaoImpl.QueryCustomizerImpl(asmUtils, dao) {
            @Override
            public java.util.List<[%= getSdkPrefix() + ref.eReferenceType.getDtoTypeName() %]> execute() {
                return dao.searchReferencedInstancesOf(reference, reference.getEReferenceType(), hu.blackbelt.judo.dao.api.DAO.QueryCustomizer.<java.util.UUID>builder()
                    .filter(!filters.isEmpty() ? filters.stream().collect(java.util.stream.Collectors.joining(" and ")) : null)
                    .orderByList(orderByList)
                    .mask(mask)
                    .seek(limit != null ? hu.blackbelt.judo.dao.api.DAO.Seek.builder().limit(limit).build() : null)
                    .build())
                    .stream()
                    .map(payload -> [%= sdkUtil %].fromPayload([%= getSdkPrefix() + ref.eReferenceType.getDtoTypeName() %].class, payload))
                    .collect(java.util.stream.Collectors.toList());
            }
        };
        [% } %]
    }
    [% } %]
}