[%
  import "../../operations/sdk.eol";
  out.setContentType("Java");
%]

package [%= getInternalPrefix() + dto.getClassifierPackageName() %];

import static hu.blackbelt.judo.sdk.SdkUtil.*;

public class [%= dto.getClassName() %]OperationsDispatcherWrapper implements [%= getSdkPrefix() + dto.getClassifierPackageName() %].[%= dto.getClassName() %].[%= dto.getClassName() %]Operations {

    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger([%= dto.getClassName() %]OperationsDispatcherWrapper.class);

	private hu.blackbelt.judo.dispatcher.api.Dispatcher dispatcher;
		
	[% for (op in dto.getSdkOperations()) { %]
		[% var map = getOperationGenerationData(dto, op); %]
		@Override
		public [%= map.get("operationMethod") %][%
            if (not op.eExceptions.isEmpty()) {
            %] throws [%= op.eExceptions.collect(ex | ex.getBareTypeDefinition() + ".Exception").concat(",") %][%
            } %] {
			String fqName = "[%= asmUtils.getOperationFqName(op) %]";
            try {
			[%= map.get("wrapperImpl") %]
			[% if (not op.eExceptions.isEmpty()) { %]
			} catch (hu.blackbelt.judo.dispatcher.api.BusinessException ex) {
			    if (log.isDebugEnabled()) {
			        log.debug("Business exception thrown by operation {}", fqName, ex);
			    }
                [% for (ex in op.eExceptions) { %]
                if ("[%= asmUtils.getClassifierFQName(ex) %]".equals(ex.getType())) {
                    throw new [%= ex.getBareTypeDefinition() %].Exception(ex.getErrorCode(), fromPayload([%= ex.getBareTypeDefinition() %].class, ex.getDetails()), ex.getCause());
                }
                [% } %]
			    throw new java.lang.IllegalStateException(ex);
			[% } %]
			} catch (java.lang.RuntimeException ex) {
			    if (log.isInfoEnabled()) {
			        log.info("Runtime exception thrown by operation {}", fqName, ex);
			    }
			    throw ex;
			}
		}
 
	[% } %]
	
}
